#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <string>

//a class that supports functions for linear and binary search
class ArraySearch{
    public:    
        int BinarySearch(std::vector <int> vec, int x, int start, int end, bool flag){
            int i, mid, k, s = start, e = end;
            flag = false;            
            
            //checking whether x is less than even the first element
            if(vec[s] > x){
                return -1;
            }

            while(s <= e){
                mid = (s + e)/2;
                
                if(vec[mid] == x){ //if x is found
                    flag = true;
                    k = mid+1;
                    while(k < end && vec[k] == x){
                        k++;
                    } //finding the greatest index k such that vec[k] == x
                    return (k-1);
                }

                else if(vec[mid] < x){ //if x is in the latter half of the given portion of vector
                    s = mid+1;
                }
                
                else{ //if x is in the former half of the given portion of vector
                    e = mid-1;
                }
            }
            
            return e; //if x is not found, e automatically stores the largest index i s.t. vec[i] < x
        }

        int LinearSearch(std::vector <int> vec, int x, int start, int end, bool flag){
            int i, val, k;
            flag = false;            

            if(vec[start] > x){ //if x is less than even the first element
                return -1;
            }

            for(i = start; i <= end; i++){
                if(vec[i] == x){ //if x is found
                    flag = true;
                    k = i+1;
                    while(k < end && vec[k] == x){
                        k++;
                    } //finding the greatest index k such that vec[k] == x
                    return (k-1);
                }
                if(vec[i] > x){ //if we reach an element that is greater than x, x won't be found after that anyway...
                    break;
                }
            }
            return (i-1); //the largest index, where value stored is less than x
        }
};

//a class that supports functions for upper and lower bound, using binary search
class Client{
    public:
        int BinarySearch(std::vector <int> vec, int x, int start, int end, bool flag){
            int i, mid, k, s = start, e = end;
            flag = false;            
            
            //checking whether x is less than even the first element
            if(vec[s] > x){
                return -1;
            }

            while(s <= e){
                mid = (s + e)/2;
                
                if(vec[mid] == x){ //if x is found
                    flag = true;
                    k = mid+1;
                    while(k < end && vec[k] == x){
                        k++;
                    } //finding the greatest index k such that vec[k] == x
                    return (k-1);
                }

                else if(vec[mid] < x){ //if x is in the latter half of the given portion of vector
                    s = mid+1;
                }
                
                else{ //if x is in the former half of the given portion of vector
                    e = mid-1;
                }
            }
            
            return e; //if x is not found, e automatically stores the largest index i s.t. vec[i] < x
        }

        int lower_bound(std::vector <int> vec, int x, int start, int end, bool flag){
            return BinarySearch(vec, x, start, end, flag);
            //The function BinarySearch returns the index of x (if found), and the largest index i s.t. vec[i] < x if not found
            //So largest index s.t. vec[i] <= x is taken care of
            //Also, BinarySearch returns -1 if x is smaller that any of the vector entries... 
            //So, the return value of BinarySearch perfectly fits the brief of lower_bound
        }

        int upper_bound(std::vector <int> vec, int x, int start, int end, bool flag){
            int index = BinarySearch(vec, x, start, end, flag);
            if(index == -1){
                return -1; //if x is less than every vector entry
            }
            else{
                return (index+1); 
            }
        }
};

int main(){
    int N;
    std::cin >> N;
    std::cin.ignore();
    std::vector <int> array(N);
    std::string str, str1, tok;
    std::getline(std::cin, str);
    std::stringstream s(str);
    int i = 0, j, l, val;
    while(s >> tok && i < N){
        array.at(i) = std::stoi(tok);
	    i++;
    }

    bool flag0, flag1, flag2, flag3;
    ArraySearch a;
    Client c;

    int input[3];
    for(i = 0; i < 4; i++){
	    std::getline(std::cin, str1);
	    l = str1.length();
        str = str1.substr(2, l-2); 
        std::stringstream s1(str);
	    j = 0;
 	    while(s1 >> tok){
	        input[j] = std::stoi(tok);
	        j++;
	        if(j == 3){
		        break;
	        }
	    }
	    if(i == 0){
	        std::cout << a.BinarySearch(array, input[0], input[1], input[2], flag0) << "\n"; 
	    }
	    else if(i == 1){
            std::cout << a.LinearSearch(array, input[0], input[1], input[2], flag1) << "\n"; 
	    }
	    else if(i == 2){
	        std::cout << c.lower_bound(array, input[0], input[1], input[2], flag2) << "\n"; 
	    }
	    else if(i == 3){
	        std::cout << c.upper_bound(array, input[0], input[1], input[2], flag3) << "\n"; 
	    }

	    input[0] = input[1] = input[2] = 0;
    }
    
    return 0;
}




